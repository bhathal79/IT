{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","playing","setPlaying","imgPath","setImgPath","isCropping","setIsCropping","newImgPathBase64","setNewImgPathBase64","width","height","crop","setCrop","HEIGHT","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","className","src","style","border","position","left","right","marginLeft","marginRight","muted","autoPlay","onClick","_","video","stream","document","getElementsByClassName","srcObject","err","console","error","canvas","createElement","videoHeight","getContext","drawImage","videoWidth","toBlob","blob","getTracks","stop","URL","createObjectURL","ruleOfThirds","onComplete","image","pixelRatio","window","devicePixelRatio","scaleX","naturalWidth","scaleY","naturalHeight","ctx","setTransform","imageSmoothingQuality","x","y","toDataURL","onChange","newCrop","paddingTop","fontSize","download","href","role","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.52659cf1.chunk.js","sourcesContent":["import React, {useState, Fragment} from 'react';\nimport ReactCrop from 'react-image-crop';\n\nfunction App() {\n  const [playing, setPlaying] = useState(false)\n  const [imgPath, setImgPath] = useState('')\n  const [isCropping, setIsCropping] = useState(false)\n  const [newImgPathBase64, setNewImgPathBase64] = useState('')\n  const [crop, setCrop] = useState({ width: 300, height: 400 });\n\n  const HEIGHT = 400;\n  const WIDTH = HEIGHT / 4 * 3;\n\n  navigator.getUserMedia = ( navigator.getUserMedia ||\n    navigator.webkitGetUserMedia ||\n    navigator.mozGetUserMedia ||\n    navigator.msGetUserMedia);\n\n  const startVideo = _ =>{\n    setIsCropping(false)\n    setImgPath('')\n    setPlaying(true)\n    navigator.getUserMedia(\n      {\n        video: true,\n      },\n      (stream) => {\n        let video = document.getElementsByClassName('app__videoFeed')[0];\n        if (video) {\n          video.srcObject = stream;\n        }\n      },\n      (err) => console.error(err)\n    );\n  }\n\n  const stopVideo = _ => {\n    setPlaying(false)\n    let video = document.getElementsByClassName('app__videoFeed')[0];\n    video.srcObject.getTracks()[0].stop();\n  }\n\n  const captureVideo = _ => {\n    const canvas = document.createElement(\"CANVAS\");\n    var video = document.getElementsByClassName('app__videoFeed')[0];\n    canvas.height = video.videoHeight;\n    canvas.width = video.videoHeight/4*3;\n    canvas.getContext('2d').drawImage(video, (video.videoWidth - (video.videoHeight/4*3))/2, 0, video.videoHeight/4*3, video.videoHeight, 0, 0, video.videoHeight/4*3, video.videoHeight);  \n    canvas.toBlob((blob) => {\n        stopVideo()\n        setImgPath(URL.createObjectURL(blob))\n    }, 'image/jpeg', 0.95);\n}\n\nconst onCropChange = (crop) => {\n  const canvas = document.createElement('canvas')\n  const image = document.createElement('img')\n  image.src = imgPath\n  const pixelRatio = window.devicePixelRatio\n  const scaleX = image.naturalWidth / image.width\n  const scaleY = image.naturalHeight / image.height\n  const ctx = canvas.getContext('2d')\n\n  canvas.width = crop.width * pixelRatio * scaleX;\n  canvas.height = crop.height * pixelRatio * scaleY;\n\n  ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n  ctx.imageSmoothingQuality = 'high';\n\n  ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width * scaleX,\n      crop.height * scaleY\n  );\n\n  setNewImgPathBase64(canvas.toDataURL(\"image/jpeg\"))\n}\n\n  return (\n    <div className='container-fluid'>\n      <div className='row mt-4'>\n        {\n          imgPath &&\n          <div className='col-12 text-center'>\n            <img src={imgPath} height={HEIGHT}/>\n          </div>\n          ||\n          <div className='col-12 text-center'>\n          {playing && <div style={{\n            border: '2px dotted red',\n            position: 'absolute',\n            height: HEIGHT,\n            width: WIDTH,\n            left: 0,\n            right: 0,\n            marginLeft: 'auto',\n            marginRight: 'auto',\n          }}>\n          </div>}\n         \n          <video\n            style={{border: '1px solid white'}}\n            height={HEIGHT}\n            muted\n            autoPlay\n            className='app__videoFeed'\n          />\n        </div>}\n      </div>\n      <div className='row'>\n        <div className='col-12 text-center mt-4'>\n          { \n            !playing && \n            <button className='btn btn-primary' onClick={startVideo}>Start</button>\n            ||\n            <button className='btn btn-success' onClick={captureVideo}>Capture</button>\n          }\n          {\n            !playing && !!imgPath &&\n            <button className='btn btn-warning ml-2' onClick={()=>setIsCropping(true)}>Crop</button>\n          }\n        </div>\n      </div>\n      {isCropping && \n      <div className='row'>\n        <div className='col-12 text-center'>\n          <hr/>\n          <h1 className='display-4'>Crop your image below!</h1>\n          <hr/>\n        </div>\n          <div className='col-5 text-center'>\n            <ReactCrop\n              src={imgPath} \n              crop={crop}\n              ruleOfThirds\n              onComplete={onCropChange}\n              onChange={newCrop => setCrop(newCrop)}\n            />\n          </div>\n          <div className='col-2 text-center' style={{paddingTop: '100px' }}>\n            <i className=\"bi bi-arrow-right-square\" style={{fontSize: '4rem', }}></i>\n          </div>\n          <div className='col-5 text-center'>\n            <div>\n              <img src={newImgPathBase64}/>\n            </div>\n            <div>\n              <a className=\"btn btn-info mt-2\" download=\"Image.png\" href={newImgPathBase64} role=\"button\">Download</a>\n            </div>\n          </div>\n        \n      </div>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'react-image-crop/dist/ReactCrop.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}